jQuery.extend(jQuery.validator.messages, translate('validation'));

jQuery.validator.addMethod("alphanumeric", function(value, element) {
    return this.optional(element) || /^[A-Za-z0-9-_]+$/i.test(value);
}, translate('validations.email_invalid_char'));

jQuery.validator.addMethod("password", function(value, element) {
    return this.optional(element) || (/\d/.test(value) &&
        /[A-Za-z]/i.test(value) && /[!@#$%*-]/i.test(value));
}, translate('validations.invalid_password'));

jQuery.validator.addMethod("maxsize",
    function(value, element, param) {
        var sizeInBytes = param * 1048576;

        if ($(element).attr("type") === "file") {
            if (element.files && element.files.length) {
                for (var i = 0; i < element.files.length; i++) {
                    if (element.files[i].size > sizeInBytes) {
                        return false;
                    }
                }
            }
        }

        return true;
    },
    $.validator.format(translate("validations.image-max-size"))
);

$('.popup-link-change').trigger('click');


function activateEnterFair(form)
{
    // validate form
    $(form).validate({
        rules: {
            email: {
                required: true,
                email: true
            },
            password: {
                required: true,
                password: false,
            }
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            email: {
                email: translate('validations.valid_email'),
                required: translate('validations.field_required'),
            },
            password: {
                required: translate('validations.field_required')
            }
        },
        errorPlacement: function(error, element) {
            error.insertAfter(element);
        },
        submitHandler: function(f) {
            var $form = $(f),
                form_data = $form.serializeArray(),
                virtual_fair_id = $form.find('input[name="virtual_fair_id"]').val();

            // convert form_data from array to object
            obj = {};
            form_data.map(function(data) {
                obj[data.name] = data.value;
            });
            form_data = obj;

            doEnterFair(virtual_fair_id, form_data);
        }
    });
}


function activateLogin(form)
{
    // validate form
    $(form).validate({
        rules: {
            email: {
                required: true,
                email: true
            },
            password: {
                required: true,
                password: false,
            }
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            email: {
                email: translate('validations.valid_email'),
                required: translate('validations.field_required'),
            },
            password: {
                required: translate('validations.field_required')
            }
        },
        errorPlacement: function(error, element) {
            error.insertAfter(element);
        },
        submitHandler: function(f) {
            var virtual_fair_id = $(f).find('input[name="virtual_fair_id"]').val();

            if (virtual_fair_id) {
                $.post(base_url + '/auth/login', $(f).serialize(), function(data) {
                    if(data.success)
                    {
                        doSubscribe(virtual_fair_id);

                        loadTrack(data);

                        closePopup('register');

                        $('.logout-link').removeClass('hidden');
                    }
                    else
                    {
                        showAlert(translate('validations.invalid_credentials'), translate('validations.login_incorrect'));
                    }
                });

            } else {
                showAlert('', translate('validations.unknown_error'));
            }
        }
    });
}


function activatePreRegister(form)
{
    // validate form
    $(form).validate({
        rules: {
            name: 'required',
            email: {
                required: true,
                email: true,
                remote: {
                    url: base_url+'/validate/email',
                    type: 'post'
                }
            }
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            name: {
                required: translate('validations.field_required')
            },
            email: {
                remote:  translate('validations.you_have_account'),
                email: translate('validations.valid_email'),
                required: translate('validations.field_required'),
            }
        },
        errorPlacement: function(error, element) {
            error.insertAfter(element);
        },
        submitHandler: function(form) {
            var virtual_fair_id = $(form).find('input[name="virtual_fair_id"]').val();

            if (virtual_fair_id == '') {
                return false;
            }

            // redirect to full registration form
            window.location = base_url+'/user/register?'+$(form).serialize();
        }
    });
}


function activateRegister(form)
{
    // validate form
    $(form).validate({
        ignore: [],
        rules: {
            virtual_fair_id: 'required',
            username: {
                alphanumeric : true,
                required: true,
                remote: {
                    url: base_url+'/validate/username',
                    type: 'post'
                }
            },
            email: {
                required: true,
                email: true,
                remote: {
                    url: base_url+'/validate/email',
                    type: 'post'
                }
            },
            password: {
                required: true,
                password: true,
                minlength: 8
            },
            confirm_password: {
                equalTo: "#password"
            },
            // profile_picture: {
            //     // required: true,
            //     maxsize: 2,
            // },
            name: 'required',
            surname: 'required',
            gender: 'required',
            'dateofbirth[day]': 'required',
            'dateofbirth[month]': 'required',
            'dateofbirth[year]': 'required',
            'city': 'required',
            'country': 'required',
            'phone': {
                required: true,
                remote: {
                    url: base_url+'/validate/phone',
                    type: 'post',
                    data: {
                        'country' : function() {
                            return $('[name="country"]').val();
                        }
                    }
                }
            },
            education: 'required',
            experience_abroad: 'required',
            language: 'required',
            'courses[]': 'required',
            'locations[][country_id]': 'required',
            who_pays: 'required',
            how_much: 'required',
            when_study_abroad: 'required',
            currency: 'required',
            expo_terms: 'required',
            parent_name: {
                required: {
                    depends: function(element) {
                        return $('input[name="is_parent"]').is(':checked');
                    }
                }
            },
            parent_gender: {
                required: {
                    depends: function(element) {
                        return $('input[name="is_parent"]').is(':checked');
                    }
                }
            },
            parent_email: {
                email: true,
                required: {
                    depends: function(element) {
                        return $('input[name="is_parent"]').is(':checked');
                    }
                }
            },
        },
        groups: {
            dateofbirth: 'dateofbirth[day] dateofbirth[month] dateofbirth[year]'
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            username: {
                required: translate('validations.field_required'),
                remote: translate('validations.username_in_use')
            },
            password: {
                required: translate('validations.field_required'),
                minlength: translate('validations.n_chars', ['8'])
            },
            email: {
                required: translate('validations.field_required'),
                remote: translate('validations.email_already_subscribed'),
                email: translate('validations.valid_email'),
            },
            profile_picture: {
                required: translate('validations.field_required')
            },
            name: {
                required: translate('validations.field_required')
            },
            surname: {
                required: translate('validations.field_required')
            },
            gender: {
                required: translate('validations.field_required')
            },
            'dateofbirth[day]': {
                required: translate('validations.field_required')
            },
            'dateofbirth[month]': {
                required: translate('validations.field_required')
            },
            'dateofbirth[year]': {
                required: translate('validations.field_required')
            },
            'city': {
                required: translate('validations.field_required')
            },
            'country': {
                required: translate('validations.field_required')
            },
            education: {
                required: translate('validations.field_required')
            },
            experience_abroad: {
                required: translate('validations.field_required')
            },
            language: {
                required: translate('validations.field_required')
            },
            'courses[]': {
                required: translate('validations.field_required')
            },
            phone: {
                required: translate('validations.field_required'),
                remote: translate('validations.invalid_phone_number')
            },
            locations: {
                required: translate('validations.field_required')
            },
            who_pays: {
                required: translate('validations.field_required')
            },
            how_much: {
                required: translate('validations.field_required')
            },
            when_study_abroad: {
                required: translate('validations.field_required')
            },
            currency: {
                required: translate('validations.field_required')
            },
            expo_terms: {
                required: translate('validations.field_required')
            }
        },
        errorPlacement: function(error, element) {
            if (element.attr('name') === 'expo_terms') {
                $(element).parents('.terms-privacy-label').append(error);

            } else if (element.attr('name') === 'dateofbirth[day]' || element.attr('name') === 'dateofbirth[month]' || element.attr('name') === 'dateofbirth[year]') {
                $(element).parents('.dateofbirth').append(error);

            } else if (element.attr('name') === 'currency') {
                $(element).parents('.form-field').find('label:last-of-type').after(error);

            } else if (element.attr('name') === 'courses[]') {
                $(element).parents('.register-levels-wrapper').append(error);

            } else {
                error.insertAfter(element);
            }
        },
        submitHandler: function(form) {

            var $form = $(form),
                $loading = $form.find('.form-loading');

            if ($form.validate().numberOfInvalids() != 0) {
                return false;
            }

            $form.attr('action', base_url+'/user/register');

            $form.append('<input type="hidden" name="timezone" value="'+jstz.determine().name()+'">');

            $loading.addClass('active');
            $form.find('.register-submit button').attr('disabled', true);
            $form.find('.register-submit button').html(translate('common.saving'));

            $form.ajaxSubmit({
                dataType: 'json',
                success: function(data) {
                    if(data.success)
                    {
                        loadTrack(data);
                        // window.location.href = data.redirect_to;
                        setTimeout(function(){document.location.href = data.redirect_to;},250);
                    }
                    else
                    {
                        showAlert('', translate('validations.error_creating_user'));
                    }

                    $loading.removeClass('active');
                    $form.find('.register-submit button').attr('disabled', false);
                },
                error: function() {
                    showAlert('', translate('validations.unknown_error'));
                    $loading.removeClass('active');
                    $form.find('.register-submit button').attr('disabled', false);
                }
            });

        }
    });
}

function activateStep2(form)
{
    // validate form
    $(form).validate({
        ignore: [],
        rules: {
            profile_picture: {
                required: true,
                maxsize: 6
            },
            education: 'required',
            'courses[]': 'required'
        },

        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            profile_picture: {
                required: translate('validations.field_required'),
                maxsize: translate('validations.image-max-size')
            },
            education: {
                required: translate('validations.field_required')
            },
            'courses[]': {
                required: translate('validations.field_required')
            }
        },
        errorPlacement: function(error, element) {
            console.log(element);
            if (element.attr('name') === 'courses[]') {

                $(element).parents('.register-levels-wrapper').append(error);

            } else {
                error.insertAfter(element);
            }
        },
        submitHandler: function(form) {

            var $form = $(form),
                $loading = $form.find('.form-loading');

            if ($form.validate().numberOfInvalids() != 0) {
                return false;
            }

            $form.attr('action', base_url+'/user/update');

            $loading.addClass('active');
            $form.find('.register-submit button').attr('disabled', true);
            $form.find('.register-submit button').html(translate('common.saving'));

            $form.ajaxSubmit({
                dataType: 'json',
                success: function(data) {
                    if(data.success)
                    {
                        if (data.status === 'confirmed') {
                            // window.location.href = base_url + '#registered';
                            setTimeout(function(){document.location.href = base_url + '#registered';},250);
                        } else {
                            // window.location.href = base_url + '#pregistered';
                            setTimeout(function(){document.location.href = base_url + '#pregistered';},250);
                        }
                    }
                    else
                    {
                        showAlert('', translate('validations.error_updating_user'));
                    }

                    $loading.removeClass('active');
                    $form.find('.register-submit button').attr('disabled', false);
                },
                error: function() {
                    showAlert('', translate('validations.unknown_error'));
                    $loading.removeClass('active');
                    $form.find('.register-submit button').attr('disabled', false);
                }
            });

        }
    });
}


function activateMissingFields(form)
{
    // validate form
    $(form).validate({
        ignore: [],
        rules: {
            // profile_picture: 'required',
            name: 'required',
            surname: 'required',
            gender: 'required',
            'dateofbirth[day]': 'required',
            'dateofbirth[month]': 'required',
            'dateofbirth[year]': 'required',
            'city': 'required',
            'country': 'required',
            'phone': {
                required: true,
                remote: {
                    url: base_url+'/validate/phone',
                    type: 'post',
                    data: {
                        'country' : function() {
                            return $('[name="country"]').val();
                        }
                    }
                }
            },
            education: 'required',
            experience_abroad: 'required',
            language: 'required',
            'courses[]': {
                required: true
                //minlength: 4
            },
            'locations[][country_id]': 'required',
            locations: 'required',
            who_pays: 'required',
            how_much: 'required',
            when_study_abroad: 'required',
            currency: 'required',
            expo_terms: 'required'
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            username: {
                required: translate('validations.field_required'),
                remote: translate('validations.username_in_use')
            },
            profile_picture: {
                required: translate('validations.field_required')
            },
            name: {
                required: translate('validations.field_required')
            },
            surname: {
                required: translate('validations.field_required')
            },
            gender: {
                required: translate('validations.field_required')
            },
            'dateofbirth[day]': {
                required: translate('validations.field_required')
            },
            'dateofbirth[month]': {
                required: translate('validations.field_required')
            },
            'dateofbirth[year]': {
                required: translate('validations.field_required')
            },
            'city': {
                required: translate('validations.field_required')
            },
            'country': {
                required: translate('validations.field_required')
            },
            education: {
                required: translate('validations.field_required')
            },
            experience_abroad: {
                required: translate('validations.field_required')
            },
            language: {
                required: translate('validations.field_required')
            },
            'courses[]': {
                required: translate('validations.field_required')
            },
            phone: {
                required: translate('validations.field_required'),
                remote: translate('validations.invalid_phone_number')
            },
            locations: {
                required: translate('validations.field_required')
            },
            who_pays: {
                required: translate('validations.field_required')
            },
            how_much: {
                required: translate('validations.field_required')
            },
            when_study_abroad: {
                required: translate('validations.field_required')
            },
            currency: {
                required: translate('validations.field_required')
            },
            expo_terms: {
                required: translate('validations.field_required')
            },
            // responsible_terms: {
            //     required: translate('validations.field_required')
            // }
        },
        errorPlacement: function(error, element) {
            if (element.attr('name') === 'expo_terms') {
                $(element).parents('label').append(error);

            } else if (element.attr('name') === 'dateofbirth[day]' || element.attr('name') === 'dateofbirth[month]' || element.attr('name') === 'dateofbirth[year]') {
                $(element).parents('.dateofbirth').append(error);

            } else if (element.attr('name') === 'currency') {
                $(element).parents('.form-field').find('label:last-of-type').after(error);

            } else if (element.attr('name') === 'courses[]') {
                $(element).parents('.register-levels-wrapper').append(error);

            } else if (element.attr('name') === 'locations[][country_id]')  {
                $(element).parent().append(error);

            } else {
                error.insertAfter(element);
            }
        },
        submitHandler: function(form) {
            var $form = $(form),
                $loading = $form.find('.form-loading');

            if ($form.validate().numberOfInvalids() != 0) {
                return false;
            }

            $form.attr('action', base_url+'/user/update');
            $form.find('button').attr('disabled', true);
            $loading.addClass('active');
            $form.find('button').html(translate('common.saving'));

            $form.ajaxSubmit({
                dataType: 'json',
                success: function(data) {
                    if(data.success)
                    {
                        var virtual_fair_id = $form.find('input[name="virtual_fair_id"]').val();

                        doSubscribe(virtual_fair_id);
                        closeModal('missing-fields');

                        // window.location.href = data.redirect_to;
                    }
                    else
                    {
                        alert(translate('validations.error_updating_user'));
                    }

                    $loading.removeClass('active');
                    $form.find('.register-submit button').attr('disabled', false);
                }
            });
        }
    });
}


function activateForgotPassword(form)
{
    // validate form
    $(form).validate({
        rules: {
            email: {
                required: true,
                email: true,
            }
        },
        errorClass: 'error-message',
        errorElement: 'div',
        messages: {
            email: {
                required: translate('validations.field_required'),
            }
        },
        errorPlacement: function(error, element) {
            error.insertAfter(element);
        },
        submitHandler: function(form) {
            $.post(base_url+'/user/resetpassword', $(form).serialize(), function(data) {
                if(data.success)
                {
                    alert(translate('registration.forgot-password-success') +' '+ data.email);
                    closeModal();

                }
                else
                {
                    alert( translate('registration.forgot-password-error'));
                }
            });
        }
    });
}


function activateContact(form)
{
    // validate form
    $(form).validate({
        rules: {
            name : {
                required: true
            },
            email : {
                required: true,
                email: true
            },
            place_id: {
                required: true
            },
            subject: {
                required: true
            },
            message: {
                required: true
            }
        },
        messages: {
            name : {
                required: translate('validations.fields_required')
            },
            email : {
                required: translate('validations.fields_required'),
                email: translate('validations.valid_email')
            },
            place_id : {
                required: translate('validations.fields_required')
            },
            subject : {
                required: translate('validations.fields_required')
            },
            message : {
                required: translate('validations.fields_required')
            }
        },
        errorPlacement: function(error, element) {
            $(form).find('.form-response').empty().addClass('error').append(error.text());
        },
        submitHandler: function(form) {
            var $form         = $(form),
                form_response = $form.find('.form-response'),
                form_loading  = $form.find('.form-loading');

            $form.hide();
            form_loading.addClass('active');
            form_response.empty().removeClass('error');

            $.ajax({
                url: base_url + '/contact',
                data: $form.serialize(),
                method: 'POST'

            }).done(function(response) {

                if (response.status == 'success') {
                    form.reset();
                    form_response.append(response.message);
                } else {
                    form_response.append(response.message).addClass('error');
                }

            }).fail(function(jqXHR, textStatus, errorThrown) {
                form_response.append(translate('validations.try-again'));

            }).always(function(jqXHR, textStatus, errorThrown) {
                form_loading.removeClass('active');
                $form.show();
            });
        }
    });
}


function enterFair(virtual_fair_id)
{
    isLoggedIn(function(data) {
        // user not logged in
        if(data.success == false)
        {
            openPopup('enter-fair');
        }
        // user logged in
        else
        {
            closePopup('enter-fair');
            if (virtual_fair_id != undefined) {
                doEnterFair(virtual_fair_id);
            }
        }
    });
}


function doEnterFair(virtual_fair_id, form_data)
{
    form_data = (typeof form_data === 'undefined') ? {} : form_data;

    form_data.virtual_fair_id = virtual_fair_id;
    form_data.user_timezone = jstz.determine().name();
    form_data.fair_datetime = $('[data-virtual-fair-datetime]').data('virtual-fair-datetime');

    var $form = $('#form-enter-fair'),
        $button = $form.find('button');

    $button.attr('disabled', true);

    $.post(base_url+'/auth/fair', form_data, function(data) {
        if(data.success)
        {
            $(location).attr('href', data.redirect_to);
        }
        else
        {
            // using alert because the popup will not open if the user is already logged in
            showAlert('', data.errors);
        }

        $button.attr('disabled', false);
    });
}


function subscribe(virtual_fair_id)
{
    openPopup('register');
}


function doSubscribe(virtual_fair_id, callback)
{
    var form_data = {virtual_fair_id: virtual_fair_id};

    // call subscribe url
    $.post(base_url+'/subscribe', form_data, function(data) {

        if(data.success)
        {
            var button = $('.btn[data-virtual-fair-id="'+virtual_fair_id+'"]');

            // button.removeClass('open-register');
            // button.removeAttr('data-action');
            // button.removeAttr('data-virtual-fair-id');

            if(data.status == 'confirmed')
            {
                // change button to confirmed
                // button.addClass('btn-registered');
                // button.wrap('<div></div>');
                // button.text(translate('registration.registered'));

                // hide quick register button
                $('#quick-register').hide();

                showAlertStep2(translate('registration.step2.thanks'), translate('registration.step2.confirmed-successfully-save'));

                // if the event is live, open the "enter the fair" popup
                // if ($('*[data-action="enter-fair"]').length) {
                //     $('*[data-action="enter-fair"]').click();
                // }
            }
            else
            {
                // change button to pending
                button.addClass('btn-pending');
                button.removeClass('btn-register');
                button.attr('data-action', 'showpending');
                button.text(translate('registration.pending'));

                if(data.status == 'pending' || data.status == 'inactive')
                {
                    openModal(base_url+'/content/user/pending');
                }
            }

            loadTrack(data);

            $('body').removeClass('no-scroll');

            if (callback) callback();
        }
        else
        {
            if(data.missing_fields)
            {
                openModal(base_url+'/user/edit?virtual_fair_id='+virtual_fair_id, function() {
                    // Logic here was moved to missing-fields.js to avoid
                    // firing it before dependecies were fully loaded
                },'missing-fields');
            }
            else
            {
                alert(translate('validations.unknown_error'));
            }
        }
    });
}


function loadTrack(data)
{
    if (data.load_facebook_track) {
        fbq('track', 'CompleteRegistration');
    }

    if (data.load_google_track) {
        window.google_trackConversion({
           google_conversion_id: google_pixel_on_expo_register_id,
           google_conversion_language: google_conversion_language,
           google_conversion_format: google_conversion_format,
           google_conversion_color: google_conversion_color,
           google_conversion_label: google_conversion_label,
           google_remarketing_only: false
        });

        gtag('event', 'conversion', {
          'send_to': 'AW-' + google_pixel_on_expo_register_id + '/' + google_conversion_label,
          'value': 1.00
        });

        gtag('event', 'Complete', {
            'event_category': 'Registration'
        });
    }

    if (data.load_twitter_track) {
        twttr.conversion.trackPid('nvaq2', { tw_sale_amount: 0, tw_order_quantity: 0 });
    }
}


function registerActions()
{
    // pre register form
    $('#form-pre-register').on('submit', function(e) {
        e.preventDefault();
    });

    activatePreRegister($('#form-pre-register'));


    // login form
    $('#form-enter-fair').on('submit', function(e) {
        e.preventDefault();
    });

    activateEnterFair($('#form-enter-fair'));


    // login form
    $('#form-login').on('submit', function(e) {
        e.preventDefault();
    });

    activateLogin($('#form-login'));


    // register form
    $('#form-register').on('submit', function(e) {
        e.preventDefault();
    });

    activateRegister($('#form-register'));


    // contact form
    $('#form-contact').on('submit', function(e) {
        e.preventDefault();
    });

    activateContact($('#form-contact'));


    // input with google autocomplete
    $('*[data-type="google_autocomplete"]').each(function(i, el) {
        setTimeout(function() {
            activateGoogleAutoComplete(el);
        }, 5000)

    });


    // button - subscribe
    $('*[data-action="subscribe"]').on('click', function(e) {
        e.preventDefault();
        var virtual_fair_id = $(e.target).attr('data-virtual-fair-id');
        subscribe(virtual_fair_id);
    });


    // button - forgot password
    $('*[data-action="forgotpassword"]').on('click', function(e) {
        e.preventDefault();
        showForgotPassword();
    });


    // button - show inactive
    $('*[data-action="showinactive"]').on('click', function(e) {
        var expo_id = $(e.target).attr('data-expo-id');

        e.preventDefault();
        openModal(base_url+'/content/user/inactive?expo_id='+expo_id);
    });


    // button - show pending
    $('*[data-action="showpending"]').on('click', function(e) {
        var expo_id = $(e.target).attr('data-expo-id');

        e.preventDefault();
        openModal(base_url+'/content/user/pending?expo_id='+expo_id);
    });


    // button - login fair
    $('*[data-action="enter-fair"]').on('click', function(e) {
        e.preventDefault();
        var virtual_fair_id = $(e.target).attr('data-virtual-fair-id');
        enterFair(virtual_fair_id);
    });

    // $('#popup-generic, .step2').on('click', function(e) {
    //     e.preventDefault();
    //     window.location.href = base_url;
    // });

}

function step2Actions() {

    $('#form-step2').on('submit', function (e) {
        e.preventDefault();
    });

    activateStep2($('#form-step2'));

    $('#form-step2, .popup').on('click', '.load-courses, .load-language-courses', showCoursesSelect);
    $('#form-step2').find('.load-courses, .load-language-courses').each(showCoursesSelect);

    function showCoursesSelect() {
        var el = this,
            $el = $(el),
            $label = $el.parents('label'),
            url = '/edufindme/courses/';


        if ($el.hasClass('load-language-courses'))
            url = '/edufindme/language-courses/';

        if ($el.data('loaded') === false) {

            if ($el.is(':checked')) {

                $.ajax({
                    url: base_url + url + el.value,
                    method: 'GET',
                    dataType: 'html'

                }).done(function (response) {

                    if (response !== '') {
                        var $response = $('<div>').html(response);
                        var areasSelected = $label.find('input').attr('data-areas-selected');
                        var languagesSelected = $label.find('input').attr('data-languages-selected');

                        areasSelected = (areasSelected && areasSelected.split(',')) || [];
                        languagesSelected = (languagesSelected && languagesSelected.split(',')) || [];

                        if (areasSelected) {
                            $response
                                .find('select[name^="areas_of_interest"] option')
                                .filter((i, el) => areasSelected.includes(`${$(el).val()}`))
                                .attr('selected', true);
                            }
                        if (languagesSelected) {
                                $response
                                    .find('select[name^="language_courses_of_interest"] option')
                                    .filter((i, el) => languagesSelected.includes(`${$(el).val()}`))
                                    .attr('selected', true);
                        }

                        $($response.html()).insertAfter($label);
                        $response.remove();

                        var new_elements = $label.nextUntil('label').filter('.chosen-select');
                        initChosen(new_elements);

                        new_elements.each(function () {
                            $(this).rules("add", {
                                required: {
                                    depends: function (element) {
                                        return $(element).prev('label').find('[name="courses[]"]').is(':checked');
                                    }
                                },
                                messages: {
                                    required: translate('validations.field_required')
                                }
                            });
                        });

                        $el.data('loaded', 'true');
                    }

                });

            }

        } else {
            var chosen_el = $('.chosen-container').length ? '.chosen-container' : '.chosen-select';

            if ($el.is(':checked')) {
                $label.nextUntil('label').filter(chosen_el).show();
            } else {
                $label.nextUntil('label').filter(chosen_el).hide();
                $label.nextUntil('label').filter('div.error-message').hide();
            }
        }
    }
}


function initChosen(elements) {
    elements.each(function() {

        var $el = $(this);

        var placeholder = translate('registration.placeholders.courses');
        if ($el.attr('name') === 'areas_of_interest[language-programs][]')
            placeholder = translate('registration.placeholders.languages');
        else if ($el.attr('name') === 'locations[][country_id]')
            placeholder = translate('registration.placeholders.countries');

        $el.chosen({
            width: '100%',
            search_contains: true,
            display_selected_options: false,
            placeholder_text_multiple: placeholder
        });

        var selectAll   = "<option value='chosen-select-all-option' id='chosen-select-all-option'>-- "+translate('registration.select-all')+" --</option>",
            deselectAll = "<option value='chosen-select-none-option' id='chosen-select-none-option'>-- "+translate('registration.deselect-all')+" --</option>";

        // check to see if this was already added
        var selectAllOption = $el.find("option[value='chosen-select-all-option']");
        if (selectAllOption === undefined || selectAllOption.length === 0) {

            // add the options as default first and last for SELECT and DESELECT respectively
            $el.prepend(deselectAll);
            // $el.prepend(selectAll);

            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                $el.prepend('<option disabled></option>');
            }

            // when it chages loop through the options list to see which were selected.
            $el.change(function() {

                $(this).find("option:selected").each(function() {
                    var value = $(this).attr("value");
                    switch (value) {
                        // - if one of the options selected was the SELECT ALL option,
                        //      remove the SELECT ALL and DESELECT ALL options, set all other
                        //      options to selected, add the master SELECT ALL and DESELECT ALL
                        //      back after the fact
                        // - update Chosen
                        case "chosen-select-all-option":
                            $el.find("option[value='chosen-select-all-option']").remove();
                            $el.find("option[value='chosen-select-none-option']").remove();
                            $el.find("option").prop("selected","selected");

                            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                                $(deselectAll).insertAfter('option[disabled]');
                                $(selectAll).insertAfter('option[disabled]');
                            } else {
                                $el.prepend(deselectAll);
                                $el.prepend(selectAll);
                            }

                            $el.trigger("chosen:updated");
                          break;
                        case "chosen-select-none-option":
                            $el.find("option[value='chosen-select-all-option']").remove();
                            $el.find("option[value='chosen-select-none-option']").remove();
                            $el.find("option").prop("selected",false);

                            if (/iP(od|hone)/i.test(window.navigator.userAgent)) {
                                $(deselectAll).insertAfter('option[disabled]');
                                $(selectAll).insertAfter('option[disabled]');
                            } else {
                                $el.prepend(deselectAll);
                                $el.prepend(selectAll);
                            }

                            $el.trigger("chosen:updated");
                            break;
                    }
                });

                // fix for validation
                $(this).next('.error-message').hide();

              }).trigger( "change" );

            // update chosen to include the SELECT ALL and DESELECT ALL options
            $el.trigger("chosen:updated");

        }

    });
}


function isLoggedIn(callback)
{
    $.get(base_url+'/auth/loggedin', function(result) {
        callback(result);
    })
}


function showForgotPassword()
{
    openModal(base_url+'/content/forgotpassword', function() {

        $('#form-forgot-password').on('submit', function(e) {
            e.preventDefault();
        });

        activateForgotPassword($('#form-forgot-password'));
    });
}


function openModal(url, callback, popup) {
    popup = (typeof popup !== 'undefined') ? popup : 'generic';

    $.get(url, function (html) {
        $('#popup-' + popup).find('.popup-wrapper').html(html);
        openPopup(popup);

        if(callback) callback();
    });
}


function closeModal(popup) {
    popup = (typeof popup !== 'undefined') ? popup : 'generic';

    $('#popup-' + popup).removeClass('active');

    // if there isn't any other opened popup...
    if (!$('.popup.active').length) {
        $('#overlay').removeClass('active');
    }
}

$('document').ready(function () {
    step2Actions();
    registerActions();
    // initChosen($('.chosen-select'));
});


var getAge = function  (dateString) {
    var today = new Date();
    var birthDate = new Date(dateString);
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();

    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }

    return age;
};


var checkAge = function () {
    var el  = $('.course_id')[0];

    if ($(el).val() == 1 && ($(el).is(':checked')) ) {
        if (!($('input[name="is_parent"]:checked').length)) {

            var year = $('select[name="dateofbirth[year]"]').val();
            var month = $('select[name="dateofbirth[month]"]').val();
            var day = $('select[name="dateofbirth[day]"]').val();

            if (month.length == 1) {
                month = '0' + month;
            }

            if (day.length == 1) {
                day = '0' + day;
            }

            if (getAge(year +'-'+month+'-'+day) > 18) {
                showAlert('', translate('validations.more_than_eighteen'));
                $(el).removeAttr('checked');
            }

        }
    }
};


var limit_profile_types = {
    initialize: function () {
        this.events();
    },

    events: function () {
        $('.course_id').change(function (e) {
            var total = $('.course_id:checked').length;

            if (total > 4) {
                showAlert('', translate('validations.four_levels'));
                $(this).removeAttr('checked');
            }

            checkAge();
        });
    }
};
limit_profile_types.initialize();


$('select[name="dateofbirth[year]"], select[name="dateofbirth[month]"], select[name="dateofbirth[day]"]').change(function () {
    checkAge();
});


$('input[name="is_parent"]').change(function () {
    checkAge();

    if ($('input[name="is_parent"]').is(':checked')) {
        $('.parent-fields').removeClass('hidden');
    } else {
        $('.parent-fields').addClass('hidden');
    }
});


$(document).on('click', '#go-to-login', function() {
    $('.popup-wrapper-login').removeClass('deactive');
    $('.popup-wrapper-register').addClass('deactive');
    $('.popup-wrapper-login input[name="email"]').val($('.popup-wrapper-register input[name="email"]').val());
});


$(document).on('click','.signup-button-facebook', function(e) {
    e.preventDefault();
    facebookLogin();
});

if (enter_fair) {
    var virtual_fair_id = $('.btn-register').attr('data-virtual-fair-id');
    enterFair(virtual_fair_id);
}


// var hash = window.location.hash;

// if(hash)
// {
//     hash = hash.replace('#', '');
//     if (hash !== '' && hash !== 'seminarios' && hash !== 'expositores') {

//         var $el = $('a[data-location-id="'+hash+'"]:first');

//         if ($el.parents('.home-city').length) {
//             $('html,body').stop(true).animate({
//                 scrollTop: $el.parents('.home-city').offset().top - $('header').height()
//             }, 700);
//         }

//         setTimeout(function() {
//             $el.trigger('click');
//         }, 100);
//     }
// }

//# sourceMappingURL=forms.min.js.map
